{"ast":null,"code":"var _jsxFileName = \"/home/tanusha/Documents/Projects/mpmc/MPMC/client/workout-split-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport ConsistencyContext, { initialUserState } from './context/ConsistencyContext'; // Import initial state\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Dashboard from './pages/Dashboard';\nimport SplitPage from './pages/SplitPage';\nimport ProfilePage from './pages/ProfilePage';\nimport ProgressPage from './pages/ProgressPage';\nimport LoginPage from './pages/LoginPage'; // Import Login Page\nimport ProtectedRoute from './components/ProtectedRoute'; // Import ProtectedRoute\n\n// --- Mock Data Store ---\n// In a real app, this comes from your backend API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockUserDatabase = {\n  \"12345\": {\n    profile: {\n      rfid: \"12345\",\n      name: 'Alice Smith',\n      email: 'alice.s@example.com',\n      joinDate: 'Mar 10, 2023'\n    },\n    initialScore: 85,\n    history: [{\n      date: 'Apr 10',\n      score: 70,\n      timestamp: Date.now() - 5 * 86400000\n    }, {\n      date: 'Apr 17',\n      score: 75,\n      timestamp: Date.now() - 4 * 86400000\n    }, {\n      date: 'Apr 24',\n      score: 80,\n      timestamp: Date.now() - 3 * 86400000\n    }, {\n      date: 'May 01',\n      score: 78,\n      timestamp: Date.now() - 2 * 86400000\n    }, {\n      date: 'May 08',\n      score: 85,\n      timestamp: Date.now() - 1 * 86400000\n    }]\n  },\n  \"67890\": {\n    profile: {\n      rfid: \"67890\",\n      name: 'Bob Williams',\n      email: 'bob.w@sample.net',\n      joinDate: 'Feb 01, 2023'\n    },\n    initialScore: 35,\n    history: [{\n      date: 'Apr 12',\n      score: 25,\n      timestamp: Date.now() - 5 * 86400000\n    }, {\n      date: 'Apr 19',\n      score: 30,\n      timestamp: Date.now() - 4 * 86400000\n    }, {\n      date: 'Apr 26',\n      score: 28,\n      timestamp: Date.now() - 3 * 86400000\n    }, {\n      date: 'May 03',\n      score: 32,\n      timestamp: Date.now() - 2 * 86400000\n    }, {\n      date: 'May 10',\n      score: 35,\n      timestamp: Date.now() - 1 * 86400000\n    }]\n  },\n  \"11223\": {\n    profile: {\n      rfid: \"11223\",\n      name: 'Charlie Brown',\n      email: 'charlie.b@mail.org',\n      joinDate: 'Apr 05, 2023'\n    },\n    initialScore: 55,\n    history: [{\n      date: 'Apr 15',\n      score: 40,\n      timestamp: Date.now() - 5 * 86400000\n    }, {\n      date: 'Apr 22',\n      score: 48,\n      timestamp: Date.now() - 4 * 86400000\n    }, {\n      date: 'Apr 29',\n      score: 50,\n      timestamp: Date.now() - 3 * 86400000\n    }, {\n      date: 'May 06',\n      score: 52,\n      timestamp: Date.now() - 2 * 86400000\n    }, {\n      date: 'May 13',\n      score: 55,\n      timestamp: Date.now() - 1 * 86400000\n    }]\n  }\n};\n// --- End Mock Data ---\n\n// Helper function to format date for chart/history\nconst formatDate = date => {\n  const options = {\n    month: 'short',\n    day: 'numeric'\n  };\n  return date.toLocaleDateString(undefined, options);\n};\nfunction App() {\n  _s();\n  const [userData, setUserData] = useState(initialUserState); // Holds score, history, profile\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(false); // Adjusted loading state\n  const navigate = useNavigate();\n  const location = useLocation(); // Needed for AnimatePresence key\n\n  // Function to fetch/simulate data FOR A SPECIFIC RFID\n  const fetchUserData = async (rfid, isRefresh = false) => {\n    console.log(isRefresh ? `Refreshing data for ${rfid}...` : `Fetching initial data for ${rfid}...`);\n    if (!isRefresh) setLoading(true);\n    try {\n      // --- Replace with actual API call ---\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n      const userFromDb = mockUserDatabase[rfid];\n      if (!userFromDb) {\n        console.error(`User with RFID ${rfid} not found.`);\n        throw new Error(\"User not found\"); // Simulate API error\n      }\n      // --- End Replace ---\n\n      // Simulate score potentially changing on refresh\n      const currentScore = isRefresh ? Math.min(100, userFromDb.initialScore + Math.floor(Math.random() * 10 - 5)) // Slight random change\n      : userFromDb.initialScore;\n\n      // Add a new entry if refreshing (optional, adjust logic as needed)\n      let updatedHistory = [...userFromDb.history]; // Start with base history\n      if (isRefresh) {\n        const newHistoryEntry = {\n          date: formatDate(new Date()),\n          timestamp: Date.now(),\n          score: currentScore\n        };\n        updatedHistory.push(newHistoryEntry);\n        // Keep only last N entries if needed\n        const MAX_HISTORY = 30;\n        if (updatedHistory.length > MAX_HISTORY) {\n          updatedHistory = updatedHistory.slice(-MAX_HISTORY);\n        }\n      }\n      updatedHistory.sort((a, b) => a.timestamp - b.timestamp); // Ensure sorted\n\n      console.log('Fetched Score:', currentScore);\n      console.log('User Profile:', userFromDb.profile);\n      setUserData({\n        profile: userFromDb.profile,\n        score: currentScore,\n        scoreHistory: updatedHistory\n      });\n      setIsLoggedIn(true); // Mark as logged in upon successful fetch\n      return true; // Indicate success\n    } catch (error) {\n      console.error(\"Failed to fetch user data:\", error);\n      // Reset state on error\n      setUserData(initialUserState);\n      setIsLoggedIn(false);\n      return false; // Indicate failure\n    } finally {\n      setLoading(false);\n      console.log('Data fetch complete.');\n    }\n  };\n\n  // Login function passed to context\n  const loginUser = async rfid => {\n    const success = await fetchUserData(rfid, false); // Fetch initial data on login\n    return success;\n  };\n\n  // Logout function passed to context\n  const logoutUser = () => {\n    console.log(\"Logging out...\");\n    setUserData(initialUserState); // Reset user data\n    setIsLoggedIn(false); // Set logged out state\n    navigate('/login'); // Redirect to login page\n  };\n\n  // Refresh function (might need RFID if API requires it)\n  const refreshScoreData = async () => {\n    if (userData.profile.rfid) {\n      await fetchUserData(userData.profile.rfid, true); // Refresh data for current user\n    } else {\n      console.warn(\"Cannot refresh score, no user logged in.\");\n    }\n  };\n\n  // Context value\n  const contextValue = {\n    userData,\n    // Pass combined user data object\n    loading,\n    isLoggedIn,\n    loginUser,\n    logoutUser,\n    refreshScore: refreshScoreData // Use the modified refresh function\n  };\n\n  // Determine if header/footer should be shown (not on login page)\n  const showLayout = location.pathname !== '/login';\n  return /*#__PURE__*/_jsxDEV(ConsistencyContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col min-h-screen bg-gray-100\",\n      children: [showLayout && /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"flex-grow\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            location: location,\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/login\",\n              element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 178,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/split\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(SplitPage, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 179,\n                  columnNumber: 63\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/progress\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(ProgressPage, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 66\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 50\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/profile\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(ProfilePage, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 65\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"*\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"container mx-auto px-4 py-16 text-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    className: \"text-4xl font-bold text-red-600 mb-4\",\n                    children: \"404 - Not Found\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 187,\n                    columnNumber: 28\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-gray-700\",\n                    children: \"The page you are looking for does not exist.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 188,\n                    columnNumber: 28\n                  }, this), /*#__PURE__*/_jsxDEV(Link, {\n                    to: \"/\",\n                    className: \"mt-6 inline-block px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors\",\n                    children: \"Go to Dashboard\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 189,\n                    columnNumber: 28\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 186,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 185,\n                columnNumber: 22\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 18\n            }, this)]\n          }, location.pathname, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), showLayout && /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WC3BJz6EylQ/rXWuQlKzboYPUu8=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Routes","Route","Link","useNavigate","useLocation","AnimatePresence","ConsistencyContext","initialUserState","Header","Footer","Dashboard","SplitPage","ProfilePage","ProgressPage","LoginPage","ProtectedRoute","jsxDEV","_jsxDEV","mockUserDatabase","profile","rfid","name","email","joinDate","initialScore","history","date","score","timestamp","Date","now","formatDate","options","month","day","toLocaleDateString","undefined","App","_s","userData","setUserData","isLoggedIn","setIsLoggedIn","loading","setLoading","navigate","location","fetchUserData","isRefresh","console","log","Promise","resolve","setTimeout","userFromDb","error","Error","currentScore","Math","min","floor","random","updatedHistory","newHistoryEntry","push","MAX_HISTORY","length","slice","sort","a","b","scoreHistory","loginUser","success","logoutUser","refreshScoreData","warn","contextValue","refreshScore","showLayout","pathname","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","mode","path","element","to","_c","$RefreshReg$"],"sources":["/home/tanusha/Documents/Projects/mpmc/MPMC/client/workout-split-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport ConsistencyContext, { initialUserState } from './context/ConsistencyContext'; // Import initial state\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Dashboard from './pages/Dashboard';\nimport SplitPage from './pages/SplitPage';\nimport ProfilePage from './pages/ProfilePage';\nimport ProgressPage from './pages/ProgressPage';\nimport LoginPage from './pages/LoginPage';      // Import Login Page\nimport ProtectedRoute from './components/ProtectedRoute'; // Import ProtectedRoute\n\n// --- Mock Data Store ---\n// In a real app, this comes from your backend API\nconst mockUserDatabase = {\n  \"12345\": {\n    profile: { rfid: \"12345\", name: 'Alice Smith', email: 'alice.s@example.com', joinDate: 'Mar 10, 2023' },\n    initialScore: 85,\n    history: [\n      { date: 'Apr 10', score: 70, timestamp: Date.now() - 5*86400000 },\n      { date: 'Apr 17', score: 75, timestamp: Date.now() - 4*86400000 },\n      { date: 'Apr 24', score: 80, timestamp: Date.now() - 3*86400000 },\n      { date: 'May 01', score: 78, timestamp: Date.now() - 2*86400000 },\n      { date: 'May 08', score: 85, timestamp: Date.now() - 1*86400000 },\n    ]\n  },\n  \"67890\": {\n    profile: { rfid: \"67890\", name: 'Bob Williams', email: 'bob.w@sample.net', joinDate: 'Feb 01, 2023' },\n    initialScore: 35,\n     history: [\n      { date: 'Apr 12', score: 25, timestamp: Date.now() - 5*86400000 },\n      { date: 'Apr 19', score: 30, timestamp: Date.now() - 4*86400000 },\n      { date: 'Apr 26', score: 28, timestamp: Date.now() - 3*86400000 },\n      { date: 'May 03', score: 32, timestamp: Date.now() - 2*86400000 },\n      { date: 'May 10', score: 35, timestamp: Date.now() - 1*86400000 },\n    ]\n  },\n   \"11223\": {\n    profile: { rfid: \"11223\", name: 'Charlie Brown', email: 'charlie.b@mail.org', joinDate: 'Apr 05, 2023' },\n    initialScore: 55,\n     history: [\n      { date: 'Apr 15', score: 40, timestamp: Date.now() - 5*86400000 },\n      { date: 'Apr 22', score: 48, timestamp: Date.now() - 4*86400000 },\n      { date: 'Apr 29', score: 50, timestamp: Date.now() - 3*86400000 },\n      { date: 'May 06', score: 52, timestamp: Date.now() - 2*86400000 },\n      { date: 'May 13', score: 55, timestamp: Date.now() - 1*86400000 },\n    ]\n  }\n};\n// --- End Mock Data ---\n\n// Helper function to format date for chart/history\nconst formatDate = (date) => {\n    const options = { month: 'short', day: 'numeric' };\n    return date.toLocaleDateString(undefined, options);\n};\n\nfunction App() {\n  const [userData, setUserData] = useState(initialUserState); // Holds score, history, profile\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(false); // Adjusted loading state\n  const navigate = useNavigate();\n  const location = useLocation(); // Needed for AnimatePresence key\n\n  // Function to fetch/simulate data FOR A SPECIFIC RFID\n  const fetchUserData = async (rfid, isRefresh = false) => {\n    console.log(isRefresh ? `Refreshing data for ${rfid}...` : `Fetching initial data for ${rfid}...`);\n    if (!isRefresh) setLoading(true);\n\n    try {\n      // --- Replace with actual API call ---\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n      const userFromDb = mockUserDatabase[rfid];\n\n      if (!userFromDb) {\n        console.error(`User with RFID ${rfid} not found.`);\n        throw new Error(\"User not found\"); // Simulate API error\n      }\n      // --- End Replace ---\n\n      // Simulate score potentially changing on refresh\n      const currentScore = isRefresh\n        ? Math.min(100, userFromDb.initialScore + Math.floor(Math.random() * 10 - 5)) // Slight random change\n        : userFromDb.initialScore;\n\n       // Add a new entry if refreshing (optional, adjust logic as needed)\n       let updatedHistory = [...userFromDb.history]; // Start with base history\n       if (isRefresh) {\n           const newHistoryEntry = {\n               date: formatDate(new Date()),\n               timestamp: Date.now(),\n               score: currentScore\n           };\n            updatedHistory.push(newHistoryEntry);\n            // Keep only last N entries if needed\n            const MAX_HISTORY = 30;\n            if (updatedHistory.length > MAX_HISTORY) {\n                updatedHistory = updatedHistory.slice(-MAX_HISTORY);\n            }\n       }\n       updatedHistory.sort((a, b) => a.timestamp - b.timestamp); // Ensure sorted\n\n\n      console.log('Fetched Score:', currentScore);\n      console.log('User Profile:', userFromDb.profile);\n\n      setUserData({\n          profile: userFromDb.profile,\n          score: currentScore,\n          scoreHistory: updatedHistory\n      });\n      setIsLoggedIn(true); // Mark as logged in upon successful fetch\n      return true; // Indicate success\n\n    } catch (error) {\n      console.error(\"Failed to fetch user data:\", error);\n      // Reset state on error\n      setUserData(initialUserState);\n      setIsLoggedIn(false);\n      return false; // Indicate failure\n    } finally {\n      setLoading(false);\n      console.log('Data fetch complete.');\n    }\n  };\n\n  // Login function passed to context\n  const loginUser = async (rfid) => {\n     const success = await fetchUserData(rfid, false); // Fetch initial data on login\n     return success;\n  };\n\n  // Logout function passed to context\n  const logoutUser = () => {\n    console.log(\"Logging out...\");\n    setUserData(initialUserState); // Reset user data\n    setIsLoggedIn(false);        // Set logged out state\n    navigate('/login');          // Redirect to login page\n  };\n\n   // Refresh function (might need RFID if API requires it)\n   const refreshScoreData = async () => {\n       if (userData.profile.rfid) {\n           await fetchUserData(userData.profile.rfid, true); // Refresh data for current user\n       } else {\n           console.warn(\"Cannot refresh score, no user logged in.\");\n       }\n   };\n\n\n  // Context value\n  const contextValue = {\n    userData, // Pass combined user data object\n    loading,\n    isLoggedIn,\n    loginUser,\n    logoutUser,\n    refreshScore: refreshScoreData // Use the modified refresh function\n  };\n\n  // Determine if header/footer should be shown (not on login page)\n  const showLayout = location.pathname !== '/login';\n\n  return (\n    <ConsistencyContext.Provider value={contextValue}>\n      <div className=\"flex flex-col min-h-screen bg-gray-100\">\n        {showLayout && <Header />}\n\n        <main className=\"flex-grow\">\n           <AnimatePresence mode='wait'>\n            {/* Use location key for proper AnimatePresence behavior */}\n            <Routes location={location} key={location.pathname}>\n                {/* Public Route */}\n                <Route path=\"/login\" element={<LoginPage />} />\n\n                {/* Protected Routes */}\n                <Route path=\"/\" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />\n                <Route path=\"/split\" element={<ProtectedRoute><SplitPage /></ProtectedRoute>} />\n                <Route path=\"/progress\" element={<ProtectedRoute><ProgressPage /></ProtectedRoute>} />\n                <Route path=\"/profile\" element={<ProtectedRoute><ProfilePage /></ProtectedRoute>} />\n\n                {/* Catch-all for 404 Not Found - Also protected? Or show generic 404? */}\n                 <Route path=\"*\" element={\n                     <ProtectedRoute>\n                        <div className=\"container mx-auto px-4 py-16 text-center\">\n                           <h1 className=\"text-4xl font-bold text-red-600 mb-4\">404 - Not Found</h1>\n                           <p className=\"text-gray-700\">The page you are looking for does not exist.</p>\n                           <Link to=\"/\" className=\"mt-6 inline-block px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors\">\n                               Go to Dashboard\n                           </Link>\n                        </div>\n                    </ProtectedRoute>\n                 }/>\n            </Routes>\n           </AnimatePresence>\n        </main>\n\n        {showLayout && <Footer />}\n      </div>\n    </ConsistencyContext.Provider>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}