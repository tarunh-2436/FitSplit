{"ast":null,"code":"var _jsxFileName = \"/home/navadeep/Documents/Projects/MPMC/client/src/components/ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport { useContext } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport ConsistencyContext from '../context/ConsistencyContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children\n}) => {\n  _s();\n  const {\n    isLoggedIn,\n    loading\n  } = useContext(ConsistencyContext);\n  const location = useLocation();\n\n  // If still loading the initial auth state, don't render anything yet\n  // (or show a generic loading indicator if preferred)\n  if (loading && !isLoggedIn) {\n    return null; // Or <GlobalLoadingIndicator />;\n  }\n  if (!isLoggedIn) {\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to. This allows us to send them back after login.\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n  return children; // Render the child component if logged in\n};\n_s(ProtectedRoute, \"YcoiR7EXuxVjbQwHrJ/J5/MVeI0=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["useContext","Navigate","useLocation","ConsistencyContext","jsxDEV","_jsxDEV","ProtectedRoute","children","_s","isLoggedIn","loading","location","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/navadeep/Documents/Projects/MPMC/client/src/components/ProtectedRoute.jsx"],"sourcesContent":["import { useContext } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport ConsistencyContext from '../context/ConsistencyContext';\n\nconst ProtectedRoute = ({ children }) => {\n  const { isLoggedIn, loading } = useContext(ConsistencyContext);\n  const location = useLocation();\n\n  // If still loading the initial auth state, don't render anything yet\n  // (or show a generic loading indicator if preferred)\n  if (loading && !isLoggedIn) {\n    return null; // Or <GlobalLoadingIndicator />;\n  }\n\n  if (!isLoggedIn) {\n    // Redirect them to the /login page, but save the current location they were\n    // trying to go to. This allows us to send them back after login.\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children; // Render the child component if logged in\n};\n\nexport default ProtectedRoute;"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,OAAOC,kBAAkB,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/D,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACvC,MAAM;IAAEC,UAAU;IAAEC;EAAQ,CAAC,GAAGV,UAAU,CAACG,kBAAkB,CAAC;EAC9D,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA,IAAIQ,OAAO,IAAI,CAACD,UAAU,EAAE;IAC1B,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,IAAI,CAACA,UAAU,EAAE;IACf;IACA;IACA,oBAAOJ,OAAA,CAACJ,QAAQ;MAACW,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEH;MAAS,CAAE;MAACI,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;EAEA,OAAOZ,QAAQ,CAAC,CAAC;AACnB,CAAC;AAACC,EAAA,CAjBIF,cAAc;EAAA,QAEDJ,WAAW;AAAA;AAAAkB,EAAA,GAFxBd,cAAc;AAmBpB,eAAeA,cAAc;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}