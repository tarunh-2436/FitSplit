{"ast":null,"code":"var _jsxFileName = \"/home/navadeep/Documents/Projects/MPMC/client/src/App.js\",\n  _s2 = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport ConsistencyContext, { initialUserState } from './context/ConsistencyContext';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Dashboard from './pages/Dashboard';\nimport SplitPage from './pages/SplitPage';\nimport ProfilePage from './pages/ProfilePage';\nimport ProgressPage from './pages/ProgressPage';\nimport LoginPage from './pages/LoginPage';\nimport ProtectedRoute from './components/ProtectedRoute';\n\n// Backend API URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = 'http://localhost:8000';\n\n// Helper function to format date for chart/history\nconst formatDate = date => {\n  const options = {\n    month: 'short',\n    day: 'numeric'\n  };\n  return date.toLocaleDateString(undefined, options);\n};\n\n// Create mock profile data since our ML backend doesn't have user profiles yet\nconst mockProfiles = {\n  \"AA6A06B0\": {\n    rfid: \"AA6A06B0\",\n    name: \"Alex Johnson\",\n    email: \"alex.j@gymbuddy.com\",\n    joinDate: 'Jan 10, 2025'\n  },\n  \"B7D8A621\": {\n    rfid: \"B7D8A621\",\n    name: \"Jamie Smith\",\n    email: \"jamie.s@gymbuddy.com\",\n    joinDate: 'Feb 15, 2025'\n  },\n  \"76A2D0BE\": {\n    rfid: \"76A2D0BE\",\n    name: \"Casey Williams\",\n    email: \"casey.w@gymbuddy.com\",\n    joinDate: 'Mar 5, 2025'\n  },\n  \"23FF6AAD\": {\n    rfid: \"23FF6AAD\",\n    name: \"Taylor Rodriguez\",\n    email: \"taylor.r@gymbuddy.com\",\n    joinDate: 'Mar 22, 2025'\n  }\n};\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [userData, setUserData] = useState(initialUserState);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Function to fetch user data from the Flask backend\n  const fetchUserData = async (rfid, isRefresh = false) => {\n    _s();\n    console.log(isRefresh ? `Refreshing data for ${rfid}...` : `Fetching initial data for ${rfid}...`);\n    if (!isRefresh) setLoading(true);\n    try {\n      // Call the actual Flask backend API\n      const response = await fetch(`${API_URL}/gym/v1/score`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          uid: rfid\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('API response:', data);\n      if (data.error) {\n        throw new Error(`API error: ${data.error}`);\n      }\n\n      // Get additional insights if available\n      let insights = data.insights || [];\n      let recommendations = [];\n      try {\n        const insightResponse = await fetch(`${API_URL}/gym/v1/users/${rfid}/insights`);\n        if (insightResponse.ok) {\n          const insightData = await insightResponse.json();\n          if (insightData.recommendations) {\n            recommendations = insightData.recommendations;\n          }\n        }\n      } catch (error) {\n        console.warn(\"Could not fetch additional insights:\", error);\n      }\n\n      // Create history entries from frequency data\n      // In a real app, you'd store history in the database\n      const scoreHistory = [];\n\n      // If we have history, use it, otherwise create mock history\n      if (data.history) {\n        scoreHistory.push(...data.history);\n      } else {\n        // Generate mock history based on current score\n        const today = new Date();\n        for (let i = 30; i >= 0; i--) {\n          const date = new Date(today);\n          date.setDate(date.getDate() - i);\n\n          // Create some variation in the score\n          const baseScore = Math.max(20, data.score - 15);\n          const scoreVariation = Math.min(100, data.score + 5) - baseScore;\n          const progression = (30 - i) / 30; // 0 to 1 progression factor\n\n          let entryScore = Math.round(baseScore + scoreVariation * progression);\n          // Add some randomness to make the graph look more natural\n          entryScore = Math.max(10, Math.min(100, entryScore + (Math.random() * 10 - 5)));\n          scoreHistory.push({\n            date: formatDate(date),\n            timestamp: date.getTime(),\n            score: entryScore\n          });\n        }\n      }\n\n      // Use mock profile data until backend provides it\n      const profile = mockProfiles[rfid] || {\n        rfid,\n        name: `User ${rfid.substring(0, 5)}`,\n        email: `user${rfid.substring(0, 3)}@gymbuddy.com`,\n        joinDate: formatDate(new Date())\n      };\n\n      // Set the consolidated user data\n      setUserData({\n        profile,\n        score: data.score,\n        scoreHistory,\n        insights,\n        recommendations,\n        frequency: data.frequency,\n        regularity: data.regularity,\n        recency: data.recency,\n        userType: data.user_type\n      });\n      setIsLoggedIn(true);\n      return true;\n    } catch (error) {\n      console.error(\"Failed to fetch user data:\", error);\n      // Use demo data in case of error\n      if (!isRefresh && rfid === \"AA6A06B0\") {\n        // Demo data for a specific RFID (can be used during development)\n        return useDemoData(rfid);\n      }\n      setUserData(initialUserState);\n      setIsLoggedIn(false);\n      return false;\n    } finally {\n      setLoading(false);\n      console.log('Data fetch complete.');\n    }\n  };\n\n  // Function to use demo data when API fails\n  _s(fetchUserData, \"7G17q6RSBUs84FSEMLRS4M8ifVc=\", false, function () {\n    return [useDemoData];\n  });\n  const useDemoData = rfid => {\n    const demoData = {\n      score: 66,\n      user_type: \"Frequent Morning Weekday\",\n      insights: [\"You maintain a somewhat consistent gym schedule.\", \"You're an early bird! Morning workouts help boost metabolism all day.\"],\n      frequency: {\n        days_visited: 91,\n        total_days: 109,\n        percentage: 83.5,\n        score: 33\n      },\n      regularity: {\n        distinct_days: 7,\n        avg_gap_between_visits: 1.2,\n        consistency_metric: 68.9,\n        score: 29,\n        day_pattern: {\n          Monday: 16,\n          Tuesday: 16,\n          Wednesday: 14,\n          Thursday: 13,\n          Friday: 16,\n          Saturday: 17,\n          Sunday: 8\n        },\n        time_pattern: {\n          morning: 74,\n          afternoon: 22,\n          evening: 4\n        }\n      },\n      recency: {\n        days_since_last_visit: 0,\n        score: 30\n      }\n    };\n\n    // Generate history based on demo data\n    const scoreHistory = [];\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n\n      // Create some variation in the score\n      const baseScore = 50;\n      const progression = (30 - i) / 30; // 0 to 1 progression factor\n\n      let entryScore = Math.round(baseScore + (demoData.score - baseScore) * progression);\n      // Add some randomness to make the graph look more natural\n      entryScore = Math.max(10, Math.min(100, entryScore + (Math.random() * 10 - 5)));\n      scoreHistory.push({\n        date: formatDate(date),\n        timestamp: date.getTime(),\n        score: entryScore\n      });\n    }\n    const profile = mockProfiles[rfid] || {\n      rfid,\n      name: `User ${rfid.substring(0, 5)}`,\n      email: `user${rfid.substring(0, 3)}@gymbuddy.com`,\n      joinDate: formatDate(new Date())\n    };\n    setUserData({\n      profile,\n      score: demoData.score,\n      scoreHistory,\n      insights: demoData.insights,\n      recommendations: [\"Try setting a goal to visit the gym at least 3-4 times per week\", \"Consider joining our early bird group classes\", \"Adding a weekend workout could help improve your results\"],\n      frequency: demoData.frequency,\n      regularity: demoData.regularity,\n      recency: demoData.recency,\n      userType: demoData.user_type\n    });\n    setIsLoggedIn(true);\n    return true;\n  };\n\n  // Login function passed to context\n  const loginUser = async rfid => {\n    const success = await fetchUserData(rfid, false);\n    return success;\n  };\n\n  // Logout function passed to context\n  const logoutUser = () => {\n    console.log(\"Logging out...\");\n    setUserData(initialUserState);\n    setIsLoggedIn(false);\n    navigate('/login');\n  };\n\n  // Refresh function to update score data\n  const refreshScoreData = async () => {\n    if (userData.profile.rfid) {\n      await fetchUserData(userData.profile.rfid, true);\n    } else {\n      console.warn(\"Cannot refresh score, no user logged in.\");\n    }\n  };\n\n  // Train models function (admin feature)\n  const trainModels = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_URL}/gym/v1/train-models`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Model training response:', data);\n      return data;\n    } catch (error) {\n      console.error(\"Failed to train models:\", error);\n      return {\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const contextValue = {\n    userData,\n    loading,\n    isLoggedIn,\n    loginUser,\n    logoutUser,\n    refreshScore: refreshScoreData,\n    trainModels\n  };\n\n  // Determine if header/footer should be shown\n  const showLayout = location.pathname !== '/login' && location.pathname !== '/landing';\n  return /*#__PURE__*/_jsxDEV(ConsistencyContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col min-h-screen bg-gray-100\",\n      children: [showLayout && /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"flex-grow\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            location: location,\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/login\",\n              element: /*#__PURE__*/_jsxDEV(LoginPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/landing\",\n              element: /*#__PURE__*/_jsxDEV(Landing, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 58\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 339,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/split\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(SplitPage, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 63\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/progress\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(ProgressPage, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 341,\n                  columnNumber: 66\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 50\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/profile\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(ProfilePage, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 65\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"*\",\n              element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"container mx-auto px-4 py-16 text-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                    className: \"text-4xl font-bold text-red-600 mb-4\",\n                    children: \"404 - Not Found\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 348,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                    className: \"text-gray-700\",\n                    children: \"The page you are looking for does not exist.\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 349,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(Link, {\n                    to: \"/\",\n                    className: \"mt-6 inline-block px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors\",\n                    children: \"Go to Dashboard\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 350,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 347,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 346,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this)]\n          }, location.pathname, true, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), showLayout && /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"WC3BJz6EylQ/rXWuQlKzboYPUu8=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Routes","Route","Link","useNavigate","useLocation","AnimatePresence","ConsistencyContext","initialUserState","Header","Footer","Dashboard","SplitPage","ProfilePage","ProgressPage","LoginPage","ProtectedRoute","jsxDEV","_jsxDEV","API_URL","formatDate","date","options","month","day","toLocaleDateString","undefined","mockProfiles","rfid","name","email","joinDate","App","_s2","_s","$RefreshSig$","userData","setUserData","isLoggedIn","setIsLoggedIn","loading","setLoading","navigate","location","fetchUserData","isRefresh","console","log","response","fetch","method","headers","body","JSON","stringify","uid","ok","Error","status","data","json","error","insights","recommendations","insightResponse","insightData","warn","scoreHistory","history","push","today","Date","i","setDate","getDate","baseScore","Math","max","score","scoreVariation","min","progression","entryScore","round","random","timestamp","getTime","profile","substring","frequency","regularity","recency","userType","user_type","useDemoData","demoData","days_visited","total_days","percentage","distinct_days","avg_gap_between_visits","consistency_metric","day_pattern","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday","time_pattern","morning","afternoon","evening","days_since_last_visit","loginUser","success","logoutUser","refreshScoreData","trainModels","message","contextValue","refreshScore","showLayout","pathname","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","mode","path","element","Landing","to","_c","$RefreshReg$"],"sources":["/home/navadeep/Documents/Projects/MPMC/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Routes, Route, Link, useNavigate, useLocation } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport ConsistencyContext, { initialUserState } from './context/ConsistencyContext';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Dashboard from './pages/Dashboard';\nimport SplitPage from './pages/SplitPage';\nimport ProfilePage from './pages/ProfilePage';\nimport ProgressPage from './pages/ProgressPage';\nimport LoginPage from './pages/LoginPage';\nimport ProtectedRoute from './components/ProtectedRoute';\n\n\n// Backend API URL\nconst API_URL = 'http://localhost:8000';\n\n// Helper function to format date for chart/history\nconst formatDate = (date) => {\n  const options = { month: 'short', day: 'numeric' };\n  return date.toLocaleDateString(undefined, options);\n};\n\n// Create mock profile data since our ML backend doesn't have user profiles yet\nconst mockProfiles = {\n  \"AA6A06B0\": { \n    rfid: \"AA6A06B0\", \n    name: \"Alex Johnson\", \n    email: \"alex.j@gymbuddy.com\", \n    joinDate: 'Jan 10, 2025' \n  },\n  \"B7D8A621\": { \n    rfid: \"B7D8A621\", \n    name: \"Jamie Smith\", \n    email: \"jamie.s@gymbuddy.com\", \n    joinDate: 'Feb 15, 2025' \n  },\n  \"76A2D0BE\": { \n    rfid: \"76A2D0BE\", \n    name: \"Casey Williams\", \n    email: \"casey.w@gymbuddy.com\", \n    joinDate: 'Mar 5, 2025' \n  },\n  \"23FF6AAD\": { \n    rfid: \"23FF6AAD\", \n    name: \"Taylor Rodriguez\", \n    email: \"taylor.r@gymbuddy.com\", \n    joinDate: 'Mar 22, 2025' \n  }\n};\n\nfunction App() {\n  const [userData, setUserData] = useState(initialUserState);\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Function to fetch user data from the Flask backend\n  const fetchUserData = async (rfid, isRefresh = false) => {\n    console.log(isRefresh ? `Refreshing data for ${rfid}...` : `Fetching initial data for ${rfid}...`);\n    if (!isRefresh) setLoading(true);\n\n    try {\n      // Call the actual Flask backend API\n      const response = await fetch(`${API_URL}/gym/v1/score`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ uid: rfid }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('API response:', data);\n\n      if (data.error) {\n        throw new Error(`API error: ${data.error}`);\n      }\n\n      // Get additional insights if available\n      let insights = data.insights || [];\n      let recommendations = [];\n\n      try {\n        const insightResponse = await fetch(`${API_URL}/gym/v1/users/${rfid}/insights`);\n        if (insightResponse.ok) {\n          const insightData = await insightResponse.json();\n          if (insightData.recommendations) {\n            recommendations = insightData.recommendations;\n          }\n        }\n      } catch (error) {\n        console.warn(\"Could not fetch additional insights:\", error);\n      }\n\n      // Create history entries from frequency data\n      // In a real app, you'd store history in the database\n      const scoreHistory = [];\n      \n      // If we have history, use it, otherwise create mock history\n      if (data.history) {\n        scoreHistory.push(...data.history);\n      } else {\n        // Generate mock history based on current score\n        const today = new Date();\n        for (let i = 30; i >= 0; i--) {\n          const date = new Date(today);\n          date.setDate(date.getDate() - i);\n          \n          // Create some variation in the score\n          const baseScore = Math.max(20, data.score - 15);\n          const scoreVariation = Math.min(100, data.score + 5) - baseScore;\n          const progression = (30 - i) / 30; // 0 to 1 progression factor\n          \n          let entryScore = Math.round(baseScore + scoreVariation * progression);\n          // Add some randomness to make the graph look more natural\n          entryScore = Math.max(10, Math.min(100, entryScore + (Math.random() * 10 - 5)));\n          \n          scoreHistory.push({\n            date: formatDate(date),\n            timestamp: date.getTime(),\n            score: entryScore\n          });\n        }\n      }\n      \n      // Use mock profile data until backend provides it\n      const profile = mockProfiles[rfid] || { \n        rfid, \n        name: `User ${rfid.substring(0, 5)}`,\n        email: `user${rfid.substring(0, 3)}@gymbuddy.com`,\n        joinDate: formatDate(new Date())\n      };\n\n      // Set the consolidated user data\n      setUserData({\n        profile,\n        score: data.score,\n        scoreHistory,\n        insights,\n        recommendations,\n        frequency: data.frequency,\n        regularity: data.regularity,\n        recency: data.recency,\n        userType: data.user_type\n      });\n\n      setIsLoggedIn(true);\n      return true;\n\n    } catch (error) {\n      console.error(\"Failed to fetch user data:\", error);\n      // Use demo data in case of error\n      if (!isRefresh && rfid === \"AA6A06B0\") {\n        // Demo data for a specific RFID (can be used during development)\n        return useDemoData(rfid);\n      }\n      \n      setUserData(initialUserState);\n      setIsLoggedIn(false);\n      return false;\n    } finally {\n      setLoading(false);\n      console.log('Data fetch complete.');\n    }\n  };\n\n  // Function to use demo data when API fails\n  const useDemoData = (rfid) => {\n    const demoData = {\n      score: 66,\n      user_type: \"Frequent Morning Weekday\",\n      insights: [\n        \"You maintain a somewhat consistent gym schedule.\",\n        \"You're an early bird! Morning workouts help boost metabolism all day.\"\n      ],\n      frequency: {\n        days_visited: 91,\n        total_days: 109,\n        percentage: 83.5,\n        score: 33\n      },\n      regularity: {\n        distinct_days: 7,\n        avg_gap_between_visits: 1.2,\n        consistency_metric: 68.9,\n        score: 29,\n        day_pattern: {\n          Monday: 16,\n          Tuesday: 16,\n          Wednesday: 14,\n          Thursday: 13,\n          Friday: 16,\n          Saturday: 17,\n          Sunday: 8\n        },\n        time_pattern: {\n          morning: 74,\n          afternoon: 22,\n          evening: 4\n        }\n      },\n      recency: {\n        days_since_last_visit: 0,\n        score: 30\n      }\n    };\n\n    // Generate history based on demo data\n    const scoreHistory = [];\n    const today = new Date();\n    for (let i = 30; i >= 0; i--) {\n      const date = new Date(today);\n      date.setDate(date.getDate() - i);\n      \n      // Create some variation in the score\n      const baseScore = 50;\n      const progression = (30 - i) / 30; // 0 to 1 progression factor\n      \n      let entryScore = Math.round(baseScore + (demoData.score - baseScore) * progression);\n      // Add some randomness to make the graph look more natural\n      entryScore = Math.max(10, Math.min(100, entryScore + (Math.random() * 10 - 5)));\n      \n      scoreHistory.push({\n        date: formatDate(date),\n        timestamp: date.getTime(),\n        score: entryScore\n      });\n    }\n\n    const profile = mockProfiles[rfid] || { \n      rfid, \n      name: `User ${rfid.substring(0, 5)}`,\n      email: `user${rfid.substring(0, 3)}@gymbuddy.com`,\n      joinDate: formatDate(new Date())\n    };\n\n    setUserData({\n      profile,\n      score: demoData.score,\n      scoreHistory,\n      insights: demoData.insights,\n      recommendations: [\n        \"Try setting a goal to visit the gym at least 3-4 times per week\",\n        \"Consider joining our early bird group classes\",\n        \"Adding a weekend workout could help improve your results\"\n      ],\n      frequency: demoData.frequency,\n      regularity: demoData.regularity,\n      recency: demoData.recency,\n      userType: demoData.user_type\n    });\n\n    setIsLoggedIn(true);\n    return true;\n  };\n\n  // Login function passed to context\n  const loginUser = async (rfid) => {\n     const success = await fetchUserData(rfid, false);\n     return success;\n  };\n\n  // Logout function passed to context\n  const logoutUser = () => {\n    console.log(\"Logging out...\");\n    setUserData(initialUserState);\n    setIsLoggedIn(false);\n    navigate('/login');\n  };\n\n  // Refresh function to update score data\n  const refreshScoreData = async () => {\n    if (userData.profile.rfid) {\n      await fetchUserData(userData.profile.rfid, true);\n    } else {\n      console.warn(\"Cannot refresh score, no user logged in.\");\n    }\n  };\n\n  // Train models function (admin feature)\n  const trainModels = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch(`${API_URL}/gym/v1/train-models`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! Status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Model training response:', data);\n      return data;\n    } catch (error) {\n      console.error(\"Failed to train models:\", error);\n      return { error: error.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const contextValue = {\n    userData,\n    loading,\n    isLoggedIn,\n    loginUser,\n    logoutUser,\n    refreshScore: refreshScoreData,\n    trainModels\n  };\n\n  // Determine if header/footer should be shown\n  const showLayout = location.pathname !== '/login' && location.pathname !== '/landing';\n\n  return (\n    <ConsistencyContext.Provider value={contextValue}>\n      <div className=\"flex flex-col min-h-screen bg-gray-100\">\n        {showLayout && <Header />}\n\n        <main className=\"flex-grow\">\n           <AnimatePresence mode='wait'>\n            <Routes location={location} key={location.pathname}>\n                {/* Public Routes */}\n                <Route path=\"/login\" element={<LoginPage />} />\n                <Route path=\"/landing\" element={<Landing />} />\n\n                {/* Protected Routes */}\n                <Route path=\"/\" element={<ProtectedRoute><Dashboard /></ProtectedRoute>} />\n                <Route path=\"/split\" element={<ProtectedRoute><SplitPage /></ProtectedRoute>} />\n                <Route path=\"/progress\" element={<ProtectedRoute><ProgressPage /></ProtectedRoute>} />\n                <Route path=\"/profile\" element={<ProtectedRoute><ProfilePage /></ProtectedRoute>} />\n\n                {/* Catch-all for 404 Not Found */}\n                <Route path=\"*\" element={\n                  <ProtectedRoute>\n                    <div className=\"container mx-auto px-4 py-16 text-center\">\n                      <h1 className=\"text-4xl font-bold text-red-600 mb-4\">404 - Not Found</h1>\n                      <p className=\"text-gray-700\">The page you are looking for does not exist.</p>\n                      <Link to=\"/\" className=\"mt-6 inline-block px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors\">\n                        Go to Dashboard\n                      </Link>\n                    </div>\n                  </ProtectedRoute>\n                }/>\n            </Routes>\n           </AnimatePresence>\n        </main>\n\n        {showLayout && <Footer />}\n      </div>\n    </ConsistencyContext.Provider>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}