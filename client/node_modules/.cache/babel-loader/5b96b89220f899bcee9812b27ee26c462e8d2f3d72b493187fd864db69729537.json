{"ast":null,"code":"var _jsxFileName = \"/home/tanusha/Documents/Projects/mpmc/MPMC/client/workout-split-app/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport ConsistencyContext from './context/ConsistencyContext';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Dashboard from './pages/Dashboard';\nimport SplitPage from './pages/SplitPage';\nimport ProfilePage from './pages/ProfilePage'; // Import new page\nimport ProgressPage from './pages/ProgressPage'; // Import new page\n\n// Helper function to format date for chart/history\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatDate = date => {\n  const options = {\n    month: 'short',\n    day: 'numeric'\n  };\n  return date.toLocaleDateString(undefined, options);\n};\nfunction App() {\n  _s();\n  const [score, setScore] = useState(null);\n  const [scoreHistory, setScoreHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  // Mock User Profile Data - In a real app, this would come from auth/backend\n  const [userProfile, setUserProfile] = useState({\n    name: 'Alex Johnson',\n    email: 'alex.j@example.com',\n    joinDate: 'Jan 15, 2023' // Example join date\n  });\n\n  // Function to fetch/generate score and history\n  const fetchConsistencyData = async (isRefresh = false) => {\n    console.log(isRefresh ? 'Refreshing data...' : 'Fetching initial data...');\n    if (!isRefresh) {\n      // Only set loading true on initial load\n      setLoading(true);\n    }\n    try {\n      // Mock API call - Simulate fetching score and history\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n\n      // Simulate generating a new score and adding to history\n      const newScore = Math.floor(Math.random() * 100);\n      const newHistoryEntry = {\n        date: formatDate(new Date()),\n        // Use formatted date for display\n        timestamp: Date.now(),\n        // Keep timestamp for sorting\n        score: newScore\n      };\n      let updatedHistory;\n      if (isRefresh) {\n        // Add new entry to existing history\n        updatedHistory = [...scoreHistory, newHistoryEntry];\n      } else {\n        // Simulate fetching initial history (e.g., last 5 scores)\n        updatedHistory = [{\n          date: formatDate(new Date(Date.now() - 4 * 86400000)),\n          timestamp: Date.now() - 4 * 86400000,\n          score: Math.floor(Math.random() * 40) + 30\n        }, {\n          date: formatDate(new Date(Date.now() - 3 * 86400000)),\n          timestamp: Date.now() - 3 * 86400000,\n          score: Math.floor(Math.random() * 50) + 35\n        }, {\n          date: formatDate(new Date(Date.now() - 2 * 86400000)),\n          timestamp: Date.now() - 2 * 86400000,\n          score: Math.floor(Math.random() * 50) + 40\n        }, {\n          date: formatDate(new Date(Date.now() - 1 * 86400000)),\n          timestamp: Date.now() - 1 * 86400000,\n          score: Math.floor(Math.random() * 60) + 40\n        }, newHistoryEntry // Include the latest score generated now\n        ].sort((a, b) => a.timestamp - b.timestamp); // Ensure sorted by date\n      }\n\n      // Keep only the last N entries if history gets too long (optional)\n      const MAX_HISTORY = 30;\n      if (updatedHistory.length > MAX_HISTORY) {\n        updatedHistory = updatedHistory.slice(-MAX_HISTORY);\n      }\n      console.log('Fetched Score:', newScore);\n      console.log('Updated History:', updatedHistory);\n      setScore(newScore); // Set the latest score\n      setScoreHistory(updatedHistory); // Set the full history\n    } catch (error) {\n      console.error(\"Failed to fetch consistency data:\", error);\n      setScore(null); // Reset on error\n      setScoreHistory([]); // Reset history on error\n    } finally {\n      setLoading(false);\n      console.log('Fetching complete.');\n    }\n  };\n\n  // Fetch initial data on mount\n  useEffect(() => {\n    fetchConsistencyData(false);\n    // In a real app, you might fetch user profile here too\n    // setUserProfile(fetchedProfile);\n  }, []); // Empty dependency array runs only once on mount\n\n  // Context value now includes history and profile\n  const contextValue = {\n    score,\n    loading,\n    refreshScore: () => fetchConsistencyData(true),\n    // Call fetch as refresh\n    scoreHistory,\n    userProfile\n  };\n  return /*#__PURE__*/_jsxDEV(ConsistencyContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col min-h-screen bg-gray-50\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"flex-grow\",\n        children: /*#__PURE__*/_jsxDEV(AnimatePresence, {\n          mode: \"wait\",\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            location: location,\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/split\",\n              element: /*#__PURE__*/_jsxDEV(SplitPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/progress\",\n              element: /*#__PURE__*/_jsxDEV(ProgressPage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 50\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/profile\",\n              element: /*#__PURE__*/_jsxDEV(ProfilePage, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this), \"   \", /*#__PURE__*/_jsxDEV(Route, {\n              path: \"*\",\n              element: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"container mx-auto px-4 py-16 text-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                  className: \"text-4xl font-bold text-red-600 mb-4\",\n                  children: \"404 - Not Found\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 24\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-gray-700\",\n                  children: \"The page you are looking for does not exist.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 119,\n                  columnNumber: 24\n                }, this), /*#__PURE__*/_jsxDEV(Link, {\n                  to: \"/\",\n                  className: \"mt-6 inline-block px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors\",\n                  children: \"Go to Dashboard\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 120,\n                  columnNumber: 24\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 17\n            }, this)]\n          }, location.pathname, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wv35MuO95MwtJT81ERBVJwkl8gI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Routes","Route","Link","AnimatePresence","ConsistencyContext","Header","Footer","Dashboard","SplitPage","ProfilePage","ProgressPage","jsxDEV","_jsxDEV","formatDate","date","options","month","day","toLocaleDateString","undefined","App","_s","score","setScore","scoreHistory","setScoreHistory","loading","setLoading","userProfile","setUserProfile","name","email","joinDate","fetchConsistencyData","isRefresh","console","log","Promise","resolve","setTimeout","newScore","Math","floor","random","newHistoryEntry","Date","timestamp","now","updatedHistory","sort","a","b","MAX_HISTORY","length","slice","error","contextValue","refreshScore","Provider","value","children","className","fileName","_jsxFileName","lineNumber","columnNumber","mode","location","path","element","to","pathname","_c","$RefreshReg$"],"sources":["/home/tanusha/Documents/Projects/mpmc/MPMC/client/workout-split-app/src/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Routes, Route, Link } from 'react-router-dom';\nimport { AnimatePresence } from 'framer-motion';\nimport ConsistencyContext from './context/ConsistencyContext';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Dashboard from './pages/Dashboard';\nimport SplitPage from './pages/SplitPage';\nimport ProfilePage from './pages/ProfilePage'; // Import new page\nimport ProgressPage from './pages/ProgressPage'; // Import new page\n\n// Helper function to format date for chart/history\nconst formatDate = (date) => {\n  const options = { month: 'short', day: 'numeric' };\n  return date.toLocaleDateString(undefined, options);\n};\n\nfunction App() {\n  const [score, setScore] = useState(null);\n  const [scoreHistory, setScoreHistory] = useState([]);\n  const [loading, setLoading] = useState(true);\n  // Mock User Profile Data - In a real app, this would come from auth/backend\n  const [userProfile, setUserProfile] = useState({\n      name: 'Alex Johnson',\n      email: 'alex.j@example.com',\n      joinDate: 'Jan 15, 2023' // Example join date\n  });\n\n  // Function to fetch/generate score and history\n  const fetchConsistencyData = async (isRefresh = false) => {\n    console.log(isRefresh ? 'Refreshing data...' : 'Fetching initial data...');\n    if (!isRefresh) { // Only set loading true on initial load\n        setLoading(true);\n    }\n\n    try {\n      // Mock API call - Simulate fetching score and history\n      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network delay\n\n      // Simulate generating a new score and adding to history\n      const newScore = Math.floor(Math.random() * 100);\n      const newHistoryEntry = {\n          date: formatDate(new Date()), // Use formatted date for display\n          timestamp: Date.now(), // Keep timestamp for sorting\n          score: newScore\n      };\n\n      let updatedHistory;\n\n      if (isRefresh) {\n          // Add new entry to existing history\n          updatedHistory = [...scoreHistory, newHistoryEntry];\n      } else {\n          // Simulate fetching initial history (e.g., last 5 scores)\n          updatedHistory = [\n              { date: formatDate(new Date(Date.now() - 4 * 86400000)), timestamp: Date.now() - 4 * 86400000, score: Math.floor(Math.random() * 40) + 30 },\n              { date: formatDate(new Date(Date.now() - 3 * 86400000)), timestamp: Date.now() - 3 * 86400000, score: Math.floor(Math.random() * 50) + 35 },\n              { date: formatDate(new Date(Date.now() - 2 * 86400000)), timestamp: Date.now() - 2 * 86400000, score: Math.floor(Math.random() * 50) + 40 },\n              { date: formatDate(new Date(Date.now() - 1 * 86400000)), timestamp: Date.now() - 1 * 86400000, score: Math.floor(Math.random() * 60) + 40 },\n              newHistoryEntry // Include the latest score generated now\n          ].sort((a, b) => a.timestamp - b.timestamp); // Ensure sorted by date\n      }\n\n       // Keep only the last N entries if history gets too long (optional)\n       const MAX_HISTORY = 30;\n       if (updatedHistory.length > MAX_HISTORY) {\n         updatedHistory = updatedHistory.slice(-MAX_HISTORY);\n       }\n\n\n      console.log('Fetched Score:', newScore);\n      console.log('Updated History:', updatedHistory);\n\n      setScore(newScore); // Set the latest score\n      setScoreHistory(updatedHistory); // Set the full history\n\n    } catch (error) {\n      console.error(\"Failed to fetch consistency data:\", error);\n      setScore(null); // Reset on error\n      setScoreHistory([]); // Reset history on error\n    } finally {\n      setLoading(false);\n      console.log('Fetching complete.');\n    }\n  };\n\n  // Fetch initial data on mount\n  useEffect(() => {\n    fetchConsistencyData(false);\n    // In a real app, you might fetch user profile here too\n    // setUserProfile(fetchedProfile);\n  }, []); // Empty dependency array runs only once on mount\n\n  // Context value now includes history and profile\n  const contextValue = {\n    score,\n    loading,\n    refreshScore: () => fetchConsistencyData(true), // Call fetch as refresh\n    scoreHistory,\n    userProfile\n  };\n\n  return (\n    <ConsistencyContext.Provider value={contextValue}>\n      <div className=\"flex flex-col min-h-screen bg-gray-50\">\n        <Header />\n\n        <main className=\"flex-grow\">\n           <AnimatePresence mode='wait'>\n            {/* Use location key for proper AnimatePresence behavior with Routes */}\n            <Routes location={location} key={location.pathname}>\n                <Route path=\"/\" element={<Dashboard />} />\n                <Route path=\"/split\" element={<SplitPage />} />\n                <Route path=\"/progress\" element={<ProgressPage />} /> {/* New route */}\n                <Route path=\"/profile\" element={<ProfilePage />} />   {/* New route */}\n                <Route path=\"*\" element={\n                    <div className=\"container mx-auto px-4 py-16 text-center\">\n                       <h1 className=\"text-4xl font-bold text-red-600 mb-4\">404 - Not Found</h1>\n                       <p className=\"text-gray-700\">The page you are looking for does not exist.</p>\n                       <Link to=\"/\" className=\"mt-6 inline-block px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors\">\n                           Go to Dashboard\n                       </Link>\n                    </div>\n                 }/>\n            </Routes>\n           </AnimatePresence>\n        </main>\n\n        <Footer />\n      </div>\n    </ConsistencyContext.Provider>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}